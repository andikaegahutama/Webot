/**
 * Copyright 2021 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type { CdpClient } from 'chromium-bidi/lib/cjs/cdp/CdpClient';
import type { CdpConnection } from 'chromium-bidi/lib/cjs/cdp/CdpConnection';
import type { ChromiumBidi, Session } from 'chromium-bidi/lib/cjs/protocol/protocol';
import { EventEmitter } from 'chromium-bidi/lib/cjs/utils/EventEmitter';
import { type LoggerFn } from 'chromium-bidi/lib/cjs/utils/log';
import type { Result } from 'chromium-bidi/lib/cjs/utils/result';
import type { BidiCommandParameterParser } from 'chromium-bidi/lib/cjs/bidiMapper/BidiParser';
import type { BidiTransport } from 'chromium-bidi/lib/cjs/bidiMapper/BidiTransport';
import type { OutgoingMessage } from 'chromium-bidi/lib/cjs/bidiMapper/OutgoingMessage';
type BidiServerEvent = {
    message: ChromiumBidi.Command;
};
export type MapperOptions = {
    acceptInsecureCerts: boolean;
    unhandledPromptBehavior?: Session.UserPromptHandler;
};
export declare class BidiServer extends EventEmitter<BidiServerEvent> {
    #private;
    private constructor();
    /**
     * Creates and starts BiDi Mapper instance.
     */
    static createAndStart(bidiTransport: BidiTransport, cdpConnection: CdpConnection, browserCdpClient: CdpClient, selfTargetId: string, options?: MapperOptions, parser?: BidiCommandParameterParser, logger?: LoggerFn): Promise<BidiServer>;
    /**
     * Sends BiDi message.
     */
    emitOutgoingMessage(messageEntry: Promise<Result<OutgoingMessage>>, event: string): void;
    close(): void;
}
export {};
