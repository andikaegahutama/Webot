/**
 * @license
 * Copyright 2023 Google Inc.
 * SPDX-License-Identifier: Apache-2.0
 */

import {ARIAQueryHandler} from 'puppeteer-core/src/cdp/AriaQueryHandler.js';

import {CSSQueryHandler} from 'puppeteer-core/src/common/CSSQueryHandler.js';
import {customQueryHandlers} from 'puppeteer-core/src/common/CustomQueryHandler.js';
import {PierceQueryHandler} from 'puppeteer-core/src/common/PierceQueryHandler.js';
import {PQueryHandler} from 'puppeteer-core/src/common/PQueryHandler.js';
import {parsePSelectors} from 'puppeteer-core/src/common/PSelectorParser.js';
import type {QueryHandler} from 'puppeteer-core/src/common/QueryHandler.js';
import {PollingOptions} from 'puppeteer-core/src/common/QueryHandler.js';
import {TextQueryHandler} from 'puppeteer-core/src/common/TextQueryHandler.js';
import {XPathQueryHandler} from 'puppeteer-core/src/common/XPathQueryHandler.js';

const BUILTIN_QUERY_HANDLERS = {
  aria: ARIAQueryHandler,
  pierce: PierceQueryHandler,
  xpath: XPathQueryHandler,
  text: TextQueryHandler,
} as const;

const QUERY_SEPARATORS = ['=', '/'];

/**
 * @internal
 */
export function getQueryHandlerAndSelector(selector: string): {
  updatedSelector: string;
  polling: PollingOptions;
  QueryHandler: typeof QueryHandler;
} {
  for (const handlerMap of [
    customQueryHandlers.names().map(name => {
      return [name, customQueryHandlers.get(name)!] as const;
    }),
    Object.entries(BUILTIN_QUERY_HANDLERS),
  ]) {
    for (const [name, QueryHandler] of handlerMap) {
      for (const separator of QUERY_SEPARATORS) {
        const prefix = `${name}${separator}`;
        if (selector.startsWith(prefix)) {
          selector = selector.slice(prefix.length);
          return {
            updatedSelector: selector,
            polling:
              name === 'aria' ? PollingOptions.RAF : PollingOptions.MUTATION,
            QueryHandler,
          };
        }
      }
    }
  }
  try {
    const [pSelector, isPureCSS, hasPseudoClasses, hasAria] =
      parsePSelectors(selector);
    if (isPureCSS) {
      return {
        updatedSelector: selector,
        polling: hasPseudoClasses
          ? PollingOptions.RAF
          : PollingOptions.MUTATION,
        QueryHandler: CSSQueryHandler,
      };
    }
    return {
      updatedSelector: JSON.stringify(pSelector),
      polling: hasAria ? PollingOptions.RAF : PollingOptions.MUTATION,
      QueryHandler: PQueryHandler,
    };
  } catch {
    return {
      updatedSelector: selector,
      polling: PollingOptions.MUTATION,
      QueryHandler: CSSQueryHandler,
    };
  }
}
